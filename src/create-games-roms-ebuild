#!/usr/bin/python3

import os
import sys
import time
import subprocess
import selenium.common
import selenium.webdriver


ROM_TYPE_LIST = ["nes", "mame"]
WEBSITE_LIST = ["romhustler.org", "romsmania.cc"]


class _Util:

    @staticmethod
    def seleniumGotoDownloadManagerAndWaitUntilDownloadComplete(seleniumDriver):
        # Returns (download-url, downloaded-filename)

        seleniumDriver.get("chrome://downloads")
        while True:
            time.sleep(1)
            try:
                # get downloaded percentage
                downloadPercentage = seleniumDriver.execute_script("return document.querySelector('downloads-manager').shadowRoot.querySelector('#downloadsList downloads-item').shadowRoot.querySelector('#progress').value")
                # check if downloadPercentage is 100 (otherwise the script will keep waiting)
                if downloadPercentage == 100:
                    # return the file name once the download is completed
                    realUrl = seleniumDriver.execute_script("return document.querySelector('downloads-manager').shadowRoot.querySelector('#downloadsList downloads-item').shadowRoot.querySelector('div#content  #file-link').href")
                    downloadedFile = seleniumDriver.execute_script("return document.querySelector('downloads-manager').shadowRoot.querySelector('#downloadsList downloads-item').shadowRoot.querySelector('div#content  #file-link').text")
                    break
            except Exception:
                pass
        return (realUrl, downloadedFile)


class TempChdir:

    def __init__(self, dirname):
        self.olddir = os.getcwd()
        os.chdir(dirname)

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        os.chdir(self.olddir)


def usage():
    global ROM_TYPE_LIST
    global WEBSITE_LIST

    print("Usage: create-games-roms-ebuild <rom-type> <website> <rom-id> <ebuild-directory>")
    print("")
    print("       rom-type: %s" % (", ".join(ROM_TYPE_LIST)))
    print("       website: %s" % (", ".join(WEBSITE_LIST)))


def parseArguments():
    global ROM_TYPE_LIST
    global WEBSITE_LIST

    romType = sys.argv[1]
    if romType in ["-h", "--help"]:
        usage()
        sys.exit(0)
    if romType not in ROM_TYPE_LIST:
        raise Exception("invalid rom-type")

    webSite = sys.argv[2]
    if webSite not in WEBSITE_LIST:
        raise Exception("invalid website")

    romId = sys.argv[3]

    ebuildDir = sys.argv[4]
    if os.path.exists(ebuildDir):
        raise Exception("ebuild directory already exists")

    return (romType, webSite, romId, ebuildDir)


def showProgress(stage, message):
    print("Progress: %s, %s" % (stage, message))


def getRomInfoForWebSite1(romType, romId):
    """Returns (rom-name, direct-download-url, local-file)"""

    # load selenium driver
    options = selenium.webdriver.chrome.options.Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument("download.default_directory=%s" % (os.getcwd()))
    driver = selenium.webdriver.Chrome(options=options)
    showProgress("Selenium driver loaded.")

    # load rom page
    url = "http://romhustler.org/rom/%s/%s" % (romType, romId)
    driver.get(url)
    showProgress("Target page (%s) loaded." % (url))

    # check if we can download this rom
    try:
        atag = driver.find_element_by_xpath("//div[contains(text(), \"download is disabled\")]")
        raise Exception("download is disabled")
    except selenium.common.exceptions.NoSuchElementException:
        pass

    # get rom-name
    romName = driver.find_element_by_xpath("//h1[@itemprop=\"name\"]").text
    showProgress("ROM name (%s) parsed." % (romName))

    # load download page, click to download
    driver.find_element_by_link_text("Click here to download this rom").click()
    while True:
        time.sleep(1)
        try:
            atag = driver.find_element_by_link_text("here")
            break
        except selenium.common.exceptions.NoSuchElementException:
            pass
    atag.click()
    showProgress("ROM download started.")

    realUrl, downloadedFile = _Util.seleniumGotoDownloadManagerAndWaitUntilDownloadComplete(driver)
    showProgress("ROM download completed.")

    return (romName, realUrl, downloadedFile)


def getRomInfoForWebSite2(romType, romId):
    assert False


def getMainFileForNesRomArchive(filename):
    assert False


def generateEbuildDir(romType, webSite, romId, romName, downloadUrl, ebuildDir):
    # generate file content
    buf = ""
    buf += "# Copyright 1999-2015 Gentoo Foundation\n"
    buf += "# Distributed under the terms of the GNU General Public License v2\n"
    buf += "# $Id$\n"
    buf += "\n"
    buf += "EAPI=6\n"
    buf += "\n"
    buf += "EROM_SITE='%s'\n" % (webSite)
    buf += "EROM_ID='%s'\n" % (romId)
    buf += "EROM_NAME='%s'\n" % (romName)
    if romType == "nes":
        buf += "inherit nes-rom\n"
    elif romType == "mame":
        buf += "inherit mame-rom\n"
    else:
        assert False
    buf += "\n"
    buf += "SRC_URI=\"%s -> ${PN}.zip\"\n" % (downloadUrl)
    buf += "LICENSE=\"unknown\"\n"

    # create ebuild file
    ebuildFile = os.path.basename(ebuildDir) + "-0.ebuild"
    os.mkdir(ebuildDir)
    with open(os.path.join(ebuildDir, ebuildFile), "w") as f:
        f.write(buf)

    # create manifest file
    with TempChdir(ebuildDir):
        subprocess.run(["/usr/bin/ebuild", ebuildFile, "manifest"], check=True)


if __name__ == "__main__":
    romType, webSite, romId, ebuildDir = parseArguments()

    if webSite == WEBSITE_LIST[0]:
        romName, url, filename = getRomInfoForWebSite1(romType, romId)
    elif webSite == WEBSITE_LIST[1]:
        romName, url, filename = getRomInfoForWebSite2(romType, romId)
    else:
        assert False

    generateEbuildDir(romType, webSite, romId, romName, url, ebuildDir)
    showProgress("Ebuild directory (%s) created." % (ebuildDir))
