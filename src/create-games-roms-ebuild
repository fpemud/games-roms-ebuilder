#!/usr/bin/python3

## include-point ##


def usage():
    print("Usage: create-games-roms-ebuild <rom-type> <website> <rom-id> <ebuild-directory>")
    print("")
    print("       rom-type: %s" % (", ".join(Const.ROM_TYPE_LIST)))
    print("       website: %s" % (", ".join(Const.WEBSITE_LIST)))


def parseArguments():
    romType = sys.argv[1]
    if romType in ["-h", "--help"]:
        usage()
        sys.exit(0)
    if romType not in Const.ROM_TYPE_LIST:
        raise Exception("invalid rom-type")

    webSite = sys.argv[2]
    if webSite not in Const.WEBSITE_LIST:
        raise Exception("invalid website")

    romId = sys.argv[3]

    ebuildDir = sys.argv[4]
    if os.path.exists(ebuildDir):
        raise Exception("ebuild directory already exists")

    if "--debug" in sys.argv:
        isDebug = True
    else:
        isDebug = False

    return (romType, webSite, romId, ebuildDir, isDebug)




def getMainFileForNesRomArchive(filename):
    assert False


def generateEbuildDir(romType, webSite, compressFormat, romId, romName, downloadUrl, ebuildDir):
    # generate file content
    buf = ""
    buf += "# Copyright 1999-2015 Gentoo Foundation\n"
    buf += "# Distributed under the terms of the GNU General Public License v2\n"
    buf += "# $Id$\n"
    buf += "\n"
    buf += "EAPI=6\n"
    buf += "\n"
    buf += "EROM_SITE='%s'\n" % (webSite)
    buf += "EROM_ID='%s'\n" % (romId)
    buf += "EROM_NAME='%s'\n" % (romName)
    if romType == "nes":
        buf += "inherit nes-rom\n"
    elif romType == "mame":
        buf += "inherit mame-rom\n"
    else:
        assert False
    buf += "\n"
    buf += "SRC_URI=\"%s -> ${PN}.%s\"\n" % (downloadUrl, compressFormat)
    buf += "LICENSE=\"unknown\"\n"

    # create ebuild file
    ebuildFile = os.path.basename(ebuildDir) + "-0.ebuild"
    os.mkdir(ebuildDir)
    with open(os.path.join(ebuildDir, ebuildFile), "w") as f:
        f.write(buf)

    # create manifest file
    with TempChdir(ebuildDir):
        subprocess.run(["/usr/bin/ebuild", ebuildFile, "manifest"], check=True)


if __name__ == "__main__":
    romType, webSite, romId, ebuildDir, isDebug = parseArguments()

    if webSite == Const.WEBSITE_LIST[0]:
        romName, url, filename = getRomInfoForWebSite1(romType, romId, isDebug)
        compressFormat = "7z"
    elif webSite == Const.WEBSITE_LIST[1]:
        romName, url, filename = getRomInfoForWebSite2(romType, romId, isDebug)
        compressFormat = "zip"
    else:
        assert False

    generateEbuildDir(romType, webSite, compressFormat, romId, romName, url, ebuildDir)
    showProgress("Ebuild directory (%s) created." % (ebuildDir))
